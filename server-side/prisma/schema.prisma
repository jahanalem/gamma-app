// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  Id           Int        @id @default(autoincrement())
  ParentId     Int?
  Parent       Category?  @relation("CategoryToParent", fields: [ParentId], references: [Id])
  Categories   Category[] @relation("CategoryToParent")
  Title        String     @db.VarChar(50)
  IsActive     Boolean
  Posts        Post[]
  CreatedDate  DateTime   @default(now())
  ModifiedDate DateTime?  @updatedAt
}

model Tag {
  Id           Int              @id @default(autoincrement())
  Title        String           @unique
  Posts        TagPostMapping[]
  CreatedDate  DateTime         @default(now())
  ModifiedDate DateTime?        @updatedAt
}

model Post {
  Id                 Int              @id @default(autoincrement())
  AuthorId           Int
  Author             User             @relation(fields: [AuthorId], references: [Id])
  CategoryId         Int?
  Category           Category?        @relation(fields: [CategoryId], references: [Id])
  Title              String           @db.VarChar(255)
  Description        String?          @db.MediumText
  Summary            String?          @db.VarChar(255)
  IsPublished        Boolean          @default(false)
  IsActive           Boolean          @default(true)
  IsActiveNewComment Boolean          @default(true)
  Comments           Comment[]
  Tags               TagPostMapping[]
  CreatedDate        DateTime         @default(now())
  ModifiedDate       DateTime?        @updatedAt
}

model TagPostMapping {
  Post         Post      @relation(fields: [PostId], references: [Id])
  PostId       Int
  Tag          Tag       @relation(fields: [TagId], references: [Id])
  TagId        Int
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt

  @@id([PostId, TagId])
}

model User {
  Id           Int       @id @default(autoincrement())
  Email        String    @unique
  Name         String?   @db.VarChar(50)
  Posts        Post[]
  Profile      Profile?
  Comments     Comment[]
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}

model Profile {
  Id           Int       @id @default(autoincrement())
  UserId       Int       @unique
  User         User      @relation(fields: [UserId], references: [Id])
  Bio          String?   @db.MediumText
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}

model Comment {
  Id           Int       @id @default(autoincrement())
  ParentId     Int?
  Parent       Comment?  @relation("CommentToParent", fields: [ParentId], references: [Id])
  Comments     Comment[] @relation("CommentToParent")
  PostId       Int
  Post         Post      @relation(fields: [PostId], references: [Id])
  WrittenById  Int
  WrittenBy    User      @relation(fields: [WrittenById], references: [Id])
  Description  String
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}
