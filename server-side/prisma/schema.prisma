// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  Id           String     @id @default(uuid())
  ParentId     String?
  Parent       Category?  @relation("CategoryToParent", fields: [ParentId], references: [Id])
  Categories   Category[] @relation("CategoryToParent")
  Title        String     @db.VarChar(50)
  IsActive     Boolean
  Posts        Post[]
  CreatedDate  DateTime   @default(now())
  ModifiedDate DateTime?  @updatedAt
}

model Tag {
  Id           String           @id @default(uuid())
  Title        String           @unique
  Posts        TagPostMapping[]
  CreatedDate  DateTime         @default(now())
  ModifiedDate DateTime?        @updatedAt
}

model Post {
  Id                 String           @id @default(uuid())
  AuthorId           String
  Author             User             @relation(fields: [AuthorId], references: [Id])
  CategoryId         String?
  Category           Category?        @relation(fields: [CategoryId], references: [Id])
  Title              String           @db.VarChar(255)
  Description        String?          @db.MediumText
  Summary            String?          @db.VarChar(255)
  IsPublished        Boolean          @default(false)
  IsActive           Boolean          @default(true)
  IsActiveNewComment Boolean          @default(true)
  Comments           Comment[]
  Tags               TagPostMapping[]
  CreatedDate        DateTime         @default(now())
  ModifiedDate       DateTime?        @updatedAt
}

model TagPostMapping {
  Id          String    @id @default(uuid())
  Post        Post?     @relation(fields: [PostId], references: [Id])
  Tag         Tag?      @relation(fields: [TagId], references: [Id])
  PostId      String?
  TagId       String?
  CreatedDate DateTime  @default(now())
  ModifiedDat DateTime? @updatedAt
}

model Comment {
  Id           String    @id @default(uuid())
  ParentId     String?
  Parent       Comment?  @relation("CommentToParent", fields: [ParentId], references: [Id])
  Comments     Comment[] @relation("CommentToParent")
  PostId       String
  Post         Post      @relation(fields: [PostId], references: [Id])
  WrittenById  String
  WrittenBy    User      @relation(fields: [WrittenById], references: [Id])
  Description  String
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}

model Profile {
  Id           String    @id @default(uuid())
  UserId       String    @unique
  User         User      @relation(fields: [UserId], references: [Id])
  Bio          String?   @db.MediumText
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}

model User {
  Id                   String            @id @default(uuid())
  Email                String            @unique @db.VarChar(64)
  NormalizedEmail      String            @unique @db.VarChar(64)
  UserName             String            @unique @db.VarChar(64)
  NormalizedUserName   String            @unique @db.VarChar(64)
  EmailConfirmed       Boolean           @default(false)
  PasswordHash         String            @db.VarChar(1024)
  PhoneNumber          String?           @db.VarChar(32)
  PhoneNumberConfirmed Boolean           @default(false)
  LockoutEnd           DateTime?
  LockoutEnabled       Boolean           @default(false)
  AccessFailedCount    Int?
  FirstName            String?           @db.VarChar(32)
  LastName             String?           @db.VarChar(32)
  BirthDate            DateTime?
  IsEmailPublic        Boolean           @default(false)
  Location             String?           @db.VarChar(128)
  IpAddress            String?           @db.VarChar(256)
  LoginProvider        String?           @db.VarChar(256)
  IsActive             Boolean           @default(true)
  Posts                Post[]
  Profile              Profile?
  Comments             Comment[]
  CreatedDate          DateTime          @default(now())
  ModifiedDate         DateTime?         @updatedAt
  Roles                UserRoleMapping[]
}

model Role {
  Id             String            @id @default(uuid())
  Name           String            @unique @db.VarChar(64)
  NormalizedName String?           @unique @db.VarChar(64)
  Description    String?           @db.VarChar(512)
  CreatedDate    DateTime          @default(now())
  ModifiedDate   DateTime?         @updatedAt
  Users          UserRoleMapping[]
}

model UserRoleMapping {
  Id           String    @id @default(uuid())
  Role         Role?     @relation(fields: [RoleId], references: [Id])
  User         User?     @relation(fields: [UserId], references: [Id])
  RoleId       String?
  UserId       String?
  CreatedDate  DateTime  @default(now())
  ModifiedDate DateTime? @updatedAt
}
